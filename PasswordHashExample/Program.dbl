
;; This code requires the following NuGet packages:
;; - System.Security.Cryptography.Algorithms
;; - System.Security.Cryptography.Csp

import System
import System.Security.Cryptography
import System.Text

main
proc
    data password = "reallySecurePassword"
    data attempt1 = "Maybe_this_iSthePassword?"
    data attempt2 = "reallySecurePassword"


    Console.WriteLine("Creating hash for password: " + password)
    data hashedPassword = new Services.Security.PasswordSecurity().HashPassword(password)
    Console.WriteLine(" - Hashed passwoed is: " + hashedPassword)
    Console.WriteLine("")
    
    Console.WriteLine("Validating possible password: " + attempt1)
    data checkpassword1 = Services.Security.PasswordSecurity().CheckPassword(attempt1,hashedPassword)
    Console.WriteLine(checkpassword1 ? " - Correct password!" : " - Wrong Password!")
    Console.WriteLine("")


    Console.WriteLine("Validating possible password: " + attempt2)
    data checkpassword2 = Services.Security.PasswordSecurity().CheckPassword(attempt2,hashedPassword)
    Console.WriteLine(checkpassword2 ? " - Correct password!" : " - Wrong Password!")
    Console.WriteLine("")

    Console.Write("Pressd a key to exit: ")
    Console.ReadKey()

    nop

endmain

namespace Services.Security

    public class PasswordSecurity

        private const saltLength, int, 16
        private const hashLength, int, 20
        private const iterations, int, 100000

        ;;; <summary>
        ;;; Converts a plain text password into a cryptographically salted and hashed value containing
        ;;; the hashed password and the random salt value used to perform the hash.
        ;;; </summary>
        ;;; <param name="password">Plain text password to hash.</param>
        ;;; <returns>Base 64 encoded string containing salt and password hash.</returns>
        public method HashPassword, string
            required in password, string
        proc
            data salt = this.GenerateSalt()
            data hash = this.ComputeHash(password, salt)
            data saltAndHash = this.JoinByteArrays(salt,hash)
            mreturn Convert.ToBase64String(saltAndHash)
        endmethod

        public method CheckPassword, boolean
            required in password, string
            required in saltAndHashString, string
        proc
            ;; Extract the bytes
            data saltAndHashBytes = Convert.FromBase64String(saltAndHashString)

            ;; Extract the salt
            data salt = new byte[saltLength]
            Array.Copy(saltAndHashBytes, 1, salt, 1, saltLength)

            ;; Extract the original hash
            data originalHash = new byte[hashLength]
            Array.Copy(saltAndHashBytes, saltLength+1, originalHash, 1, hashLength)
            
            ;; Compute the hash of the password the user entered
            disposable data pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations)
            data hash = pbkdf2.GetBytes(hashLength)

            ;; comparee the original and current hash values
            data ix = 0
            for ix from 1 thru hashLength
                if originalHash[ix] != hash[ix]
                    mreturn false

            ;;Good password
            mreturn true

        endmethod

        public method GenerateSalt, [#]byte
        proc
            data bytes = new byte[saltLength]
            disposable data rng = new RNGCryptoServiceProvider()
            rng.GetBytes(bytes)
            mreturn bytes
        endmethod

        public method ComputeHash, [#]byte
            required in stringToHash, string
            required in salt, [#]byte
        proc
            disposable data pbkdf2 = new Rfc2898DeriveBytes(stringToHash, salt, iterations)
            data hashBytes = pbkdf2.GetBytes(hashLength)
            mreturn hashBytes
        endmethod

        public method JoinByteArrays, [#]byte
            required in array1, [#]byte
            required in array2, [#]byte
        proc
            data result = new byte[array1.Length + array2.Length]
            Array.Copy(array1,1,result,1,array1.Length)
            Array.Copy(array2,1,result,array1.Length+1,array2.Length)
            mreturn result
        endmethod

        public method ByteArrayToBase64String, string
            required in byteArray, [#]byte
        proc
            mreturn Convert.ToBase64String(byteArray)
        endmethod

    endclass

endnamespace
